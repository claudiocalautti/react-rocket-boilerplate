// Responsive mixin, create a media query with the style for a given
// breakpoint, based on the selected approach, which can be set
// with these shorthands '<' and '>'.
//
// USAGE:
// .example {
// 	width: 100%;
//
// 	@include responsive('>', 'tablets') {
// 		width: 50%;
// 	};
// }

// Settings
$mobile-first: 'min-width';
$desktop-first: 'max-width';

$named-breakpoints: (
	'iphone5': em(320px),
	'iphone6': em(375px),
	'phones': em(736px), // Include iPhone 6 Plus at 736px.
	'tablets': em(770px),
	'desktops': em(992px),
	'ipad-landscape': em(1024px),
	'wide-screen': em(1200px)
);

@mixin responsive($approach: null, $breakpoint: null, $properties: null) {

	// Set approach type
	@if $approach == '>' {
		$approach: $mobile-first;
	} @else if $approach == '<' {
		$approach: $desktop-first;
	}

	// Get breakpoint value from breakpoints array
	@if type-of($breakpoint) == string {
		// Check if breakpoint name exist in array
		@if (map-has-key($named-breakpoints, $breakpoint)) {
			// Set breakpoint value
			$breakpoint: map-get($named-breakpoints, $breakpoint);
		} @else {
			@warn 'Cannot find named breakpoint: ' + $breakpoint;
		}
	} @else {
		// If breakpoint is not in breakpoints array convert px to em
		$breakpoint: em($breakpoint);
	}

	// Print media query
	@media only screen and (#{$approach}: #{$breakpoint}) {
		@content;
	}
}

// BOOTSTRAP BREAKPOINTS

// ============  Mobile First Method  =============
// min-width: 320px   Custom, iPhone Retina
// min-width: 480px   Extra Small Devices, Phones
// min-width: 768px   Small Devices, Tablets
// min-width: 992px   Medium Devices, Desktops
// min-width: 1200px  Large Devices, Wide Screens

// ============  Desktop First Method  ============
// max-width: 1200px  Large Devices, Wide Screens
// max-width: 992px   Medium Devices, Desktops
// max-width: 768px   Small Devices, Tablets
// max-width: 480px   Extra Small Devices, Phones
// max-width: 320px   Custom, iPhone Retina
